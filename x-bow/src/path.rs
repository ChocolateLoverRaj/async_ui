use std::cell::{Ref, RefCell, RefMut};

use crate::{hash_visitor::HashVisitor, wakers::StoreWakers};

/// A Path object identifies a piece of the data store.
///
/// It can convert a borrow of the store's data to a borrow of the piece it identifies.
///
/// Often, you won't be working with the `Path` trait itself, but rather
/// the [PathExt][crate::PathExt] trait.
///
/// Path objects are mostly generated by `#[derive(x_bow::Trackable)]`.
/// To hand-implement, see example code in `src/impls/stdlib`.
pub trait Path {
    type Out: ?Sized;

    /// Borrow the data at the given path immutably.
    ///
    /// If there is an existing mutable borrow anywhere in the store,
    /// this method will panic.
    fn path_borrow<'d>(&'d self) -> Option<Ref<'d, Self::Out>>
    where
        Self: 'd;

    /// Borrow the data at the given path mutably.
    ///
    /// Unlike [borrow_opt_mut][crate::PathExt::borrow_opt_mut], this method
    /// **does not notify** listeners. This silence can mess up your application
    /// logic, so be careful.
    ///
    /// If there is an existing mutable or immutable borrow anywhere in the store,
    /// this method will panic.
    fn path_borrow_mut<'d>(&'d self) -> Option<RefMut<'d, Self::Out>>
    where
        Self: 'd;

    /// Call the given visitor function on the hash of this path node and every
    /// ancestor node in the path.
    fn visit_hashes(&self, visitor: &mut HashVisitor);

    /// Used internally for subscription and notification system.
    fn store_wakers(&self) -> &RefCell<StoreWakers>;
}
