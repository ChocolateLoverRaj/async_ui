use async_ui_web::{html::Div, NoChild};

// ANCHOR: no-shortcut
async fn div_with_class() {
    let div = Div::new();
    div.class_list().add_1("my-container").expect("?!?!");
    div.render(NoChild).await;
}
// ANCHOR_END: no-shortcut

// ANCHOR: shortcut-imperative
use async_ui_web::shortcut_traits::ShortcutClassList; // ðŸ‘ˆ new import!
async fn div_with_class_2() {
    let div = Div::new();

    // ðŸ‘‡ `add_class` provided by the trait
    div.add_class("my-container");
    // ðŸ‘‡ `add_classes` for multiple classes
    div.add_classes(["my-class", "another-class"]);

    div.render(NoChild).await;
}
// ANCHOR_END: shortcut-imperative
// ANCHOR: shortcut-builder
use async_ui_web::shortcut_traits::ShortcutClassListBuilder; // ðŸ‘ˆ new import!
async fn div_with_class_3() {
    Div::new()
        // ðŸ‘‡ add classes without putting `Div` in a variable
        .with_classes(["my-class", "another-class"])
        .render(NoChild)
        .await;
}
// ANCHOR_END: shortcut-builder
// ANCHOR: embedded-css
mod style {
    // ðŸ‘‡ Write our CSS here!
    async_ui_web::css!(
        "
.my-class {
	border: 2px solid red;
}
/* Supports any selector */
.flex.my-class:not(:hover) {
	background-color: green;
}
		"
    );
}
async fn div_with_style() {
    Div::new()
        // ðŸ‘‡ the `style::my_class` constant is generated by the macro
        .with_class(style::my_class)
        .render(NoChild)
        .await;
}
// ANCHOR_END: embedded-css
